<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="200" name="TARGET"/>
<constant value="500" name="THRESHOLD"/>
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="2" name="BLOCKED"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#*  File: StopNGo
	Date: Sept, 2022
	Author: CSCI 1108: Experimental Robotics.
	Purpose: Lab 6 Modeling the Real World
	Description: A program that makes the Tymio Robot drive forward
	             until it senses an obstacle in front of it. 
*#

var min                             # min over all sensor readings
var max                             # max over all sensor readings
var mean                            # average over all sensor readings
var state = STOPPED                 # state of the robot

motor.left.target = 0               # reset motors
motor.right.target = 0

onevent button.forward              # if forward button is pressed  
  state = FORWARD                   # transition to FORWARD state
  motor.left.target = TARGET        # start moving forward
  motor.right.target = TARGET
	
onevent button.backward             # if backward button is pressed
  state = STOPPED                   # transition to STOPPED state
  motor.left.target = 0             # stop motors
  motor.right.target = 0
	
onevent prox                        # check proximity sensors
  if state != STOPPED then          # only if we are not STOPPED
    # compute min, max, and mean over the current sensor readings 
    call math.stat( prox.horizontal[0:4], min, max, mean )

    # if we are in state FORWARD and sense a blockage    
    if state == FORWARD and max > THRESHOLD then     
      state = BLOCKED               # transition to BLOCKED state
      motor.left.target = 0         # stop motors
      motor.right.target = 0
    end

    # if we are in state BLOCKED and blockage is removed    
    if state == BLOCKED and max &lt;= THRESHOLD then
      state = FORWARD                # transition to FORWARD state
      motor.left.target = TARGET     # start moving forward
      motor.right.target = TARGET
    end
  end
</node>


</network>
