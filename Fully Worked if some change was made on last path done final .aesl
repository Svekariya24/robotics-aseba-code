<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="7" name="ltstate"/>


<!--list of constants-->
<constant value="300" name="SPEED"/>
<constant value="200" name="EDGE"/>
<constant value="0" name="STOPPED"/>
<constant value="1" name="LEFT"/>
<constant value="2" name="RIGHT"/>
<constant value="3" name="FORWARD"/>
<constant value="500" name="THR"/>
<constant value="4" name="TURNING_LEFT"/>
<constant value="5" name="TURNING_RIGHT"/>
<constant value="100" name="WAIT"/>
<constant value="3000" name="THR_W"/>
<constant value="800" name="THR_B"/>
<constant value="6" name="FORWARDMAX"/>
<constant value="770" name="TURN_PERIOD"/>
<constant value="13" name="NOT_FOLLOW_LINE"/>
<constant value="500" name="FINAL"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state=STOPPED
var direction=0
var test=0
var counter=0
var lines = 0
var tapeOrTable = 0
var canFollowNow=0
var final=0
var stp = 0
var abc=0
var firstCode=0
var counterEn=0
var disableAll=0

var openSide=0
# 1-> left
# 2-> right


call leds.circle(0,0,0,0,0,0,0,0)



motor.left.target=0
motor.right.target=0


onevent button.forward
	if disableAll==0 then
		state=FORWARD
	end
	
onevent button.backward

if disableAll==0 then
	counter=0
	lines=0
	stp = 0
	state=STOPPED
	motor.left.target=0
	motor.right.target=0
	timer.period[0]=200
	call leds.circle(0,0,0,0,0,0,0,0)
	call leds.top(0,0,0)
	counterEn=0
	openSide=0
end
onevent prox 
	
	 if state != STOPPED then            	   
#----------------------------------------------------------------------------#  	 	                                                                                                                                      
   		if counter >=3 then
				if (tapeOrTable == 0) and (prox.ground.delta[0] &lt;= EDGE) then
				tapeOrTable = 1
				elseif (tapeOrTable == 1) and (prox.ground.delta[0] > EDGE) then
				tapeOrTable = 0
				lines ++
				end
	   		end
		   	if lines>=2 and lines&lt;6 then
		   		state=WAIT
		   		counter++
		   		motor.right.target=0
		   		motor.left.target=0
		   		call leds.top(255,0,0)
		   		call sound.freq(500,50)
		   		timer.period[0]=5000
	   			
	   		end

   		if (state==FORWARD) then
   			counterEn=1
   			motor.left.target=SPEED
   			motor.right.target=SPEED
   			timer.period[0]=200
   			
#  this peice of code only works 1 time. before reaching the line of the 1st barcode
#----------------------------------------------------------------------------#    			
#----------------------------------------------------------------------------#    
# this part of the code workes after checking the barcode and going to the next barcode     		
     	elseif (state==FORWARDMAX) then
     			counterEn=1
   				motor.left.target=300
   				motor.right.target=300
   				timer.period[0]=200
   			
   			if prox.horizontal[4] > 4000  then
   				motor.left.target=-200
   				motor.right.target=200
   				timer.period[0]=100
   			end
   			
   			
   			 if prox.horizontal[0] > 3000 or prox.horizontal[1] > 300 then
   				motor.left.target=100
   				motor.right.target=-100
   				timer.period[0]=100
   			 end
#   			if prox.ground.delta[1] &lt;= EDGE and  prox.ground.delta[0] &lt;= EDGE and final==1 and lines>=6 then
#   				state=STOPPED
#   				motor.left.target=0
#   				motor.right.target=0
#   				call leds.top(0,0,255)
#   				counter=100
#   			end
   			
	   	elseif state==STOPPED then
			    motor.left.target=0
			    motor.right.target=0
   		end
   		if state==NOT_FOLLOW_LINE and canFollowNow==1 and prox.ground.delta[0] &lt;= EDGE and prox.ground.delta[1] > EDGE  then
   			state=RIGHT
   		elseif state==NOT_FOLLOW_LINE and canFollowNow==1 and prox.ground.delta[1] &lt;= EDGE and  prox.ground.delta[0] > EDGE then
   			state=LEFT
   		end
#----------------------------------------------------------------------------#      		
   		
#----------------------------------------------------------------------------#   		
#       line follow before barcode start here 
   		if prox.ground.delta[0] &lt;= EDGE and prox.ground.delta[1] > EDGE and (counter&lt;3 or lines>=5) and state != NOT_FOLLOW_LINE  then
	      state = RIGHT 
	      counterEn=0                        #  transition to RIGHT state
	      motor.left.target = 0             	#  move right
	      motor.right.target = SPEED
	      timer.period[0]=200

	    elseif prox.ground.delta[1] &lt;= EDGE and  prox.ground.delta[0] > EDGE and (counter&lt;3 or lines>=5) and state != NOT_FOLLOW_LINE                                                      then
	      counterEn=0
	      state = LEFT                          #  transition to RIGHT state
	      motor.left.target = SPEED         	#  move right
	      motor.right.target = 0
	      timer.period[0]=200
	    elseif prox.ground.delta[1] > EDGE and  prox.ground.delta[0] > EDGE and counter>=16 and counter&lt;20 then	
	    timer.period[0]=500
		elseif prox.ground.delta[1] &lt;= EDGE and  prox.ground.delta[0] &lt;= EDGE and counter==20  then	
	    state=STOPPED
	    disableAll=1
	    motor.left.target=0
	    motor.right.target=0
	    call leds.top(0,0,255)
	    
	    end
#       line follow before barcode ends here 
#----------------------------------------------------------------------------#


#----------------------------------------------------------------------------#
#       barcode reading start here	    
#	    1st bar code (LL)
	    if prox.horizontal[1]>prox.horizontal[3] and prox.horizontal[2]>THR_B and prox.horizontal[3]>THR_B and counter==0 then
#		    counter=1
	    		firstCode=1
	    	  state=TURNING_LEFT
	    	  call leds.circle(0,0,0,0,0,0,32,0)
#	    1st barcode(RR) 
	    	elseif prox.horizontal[3]>prox.horizontal[2] and prox.horizontal[2]>1500 and prox.horizontal[1]> 350 and counter==0 then
	    	
#	    	counter=1
	    	firstCode=2
	    	  state=TURNING_RIGHT
	    	   call leds.circle(0,0,32,0,0,0,0,0)
	    end	  
	    	  
#	    2nd barcode(LL)
	    	if prox.horizontal[1]>THR_W and  prox.horizontal[2]>THR_B and prox.horizontal[3]>THR_B and  counter==1  then
#	   	if counterEn==1 then
#	   		counter=2
#	   	end
	   	state=TURNING_RIGHT
	   	call leds.circle(0,0,32,0,0,0,0,0)
	   	if openSide==0 then
	    	  	openSide=1
	    	  end
	   	if firstCode==1 then
	   		state=TURNING_RIGHT
	   		call leds.circle(0,0,32,0,0,0,0,0)
	   	elseif firstCode==2 then
	   		state=TURNING_LEFT
	   		call leds.circle(0,0,0,0,0,0,32,0)
	   	end
#	    2nd barcode(RR)	   	
	   	elseif prox.horizontal[3]>3000 and prox.horizontal[2]>450 and prox.horizontal[1]>900 and counter==1 then
#	    	  if counterEn==1 then
#	   		counter=2
#	   	end 
	    	  state=TURNING_RIGHT
	    	  call leds.circle(0,0,32,0,0,0,0,0)
	    	  if openSide==0 then
	    	  	openSide=2
	    	  end
	    	  	if firstCode==1 then
	   		state=TURNING_RIGHT
	   		call leds.circle(0,0,32,0,0,0,0,0)
	   	elseif firstCode==2 then
	   		state=TURNING_LEFT
	   		call leds.circle(0,0,0,0,0,0,32,0)
	   	end
	   	end
	   	
	   		   	
#	   	3rd barcode(LL)
	    if prox.horizontal[1]>THR_B and  prox.horizontal[2]>THR_W and prox.horizontal[3]>THR_B and  counter==2 then
#	    if counterEn==1 then
#	   		counter=3
#	   	end
	    
	   	state=TURNING_RIGHT	
			if firstCode==1 then
		   		state=TURNING_RIGHT
		   		call leds.circle(0,0,32,0,0,0,0,0)
		   	elseif firstCode==2 then
		   		state=TURNING_LEFT
		   		call leds.circle(0,0,0,0,0,0,32,0)
		   	end
		elseif prox.horizontal[1]>THR_B and  prox.horizontal[2]>THR_B and prox.horizontal[3]>THR_W and  counter==2 then
		
#		if counterEn==1 then
#	   		counter=2
#	   	end
			if firstCode==1 then
		   		state=TURNING_RIGHT
		   		call leds.circle(0,0,32,0,0,0,0,0)
		   	elseif firstCode==2 then
		   		state=TURNING_LEFT
		   		call leds.circle(0,0,0,0,0,0,32,0)
		   	end
	    end		   	
	    
#	    barcode reading done here

#----------------------------------------------------------------------------#
	    
#----------------------------------------------------------------------------#	    
#	    turning instruction after reading the barcode	    
	    
	    if (state==TURNING_LEFT)  and counter ==0 then
	    	  motor.left.target = -SPEED        	#  move right
	    	  motor.right.target = SPEED
	    	  timer.period[0]=TURN_PERIOD  # check the angle
	    	  
	    	elseif (state==TURNING_LEFT)  and counter >0 then
	    	  motor.left.target = -SPEED        	#  move right
	    	  motor.right.target = SPEED
	    	  timer.period[0]=TURN_PERIOD  # check the angle
	   
	    	elseif ((state==TURNING_RIGHT)  and counter ==0) then
	    	  motor.left.target = SPEED        	#  move right
	    	  motor.right.target = -SPEED
	    	  timer.period[0]=TURN_PERIOD # check the angle
	    	  
	    elseif ((state==TURNING_RIGHT)  and counter >0) then
	    	  motor.left.target = SPEED        	#  move right
	    	  motor.right.target = -SPEED
	    	  timer.period[0]=TURN_PERIOD # check the angle
	    end
	    
	 else
	    	  
	    	state=STOPPED
	   	motor.left.target=0
	   	motor.right.target=0
#----------------------------------------------------------------------------#
  end   #this end is for the if(!= STOPPED)	
  	    
onevent timer0

	if (state==TURNING_LEFT) then
	    timer.period[0]=0
		counter++	
		state=FORWARDMAX
		motor.left.target = 300      	
	    	motor.right.target = 300
	    	
	elseif(state==TURNING_RIGHT) then
		counter++
		state=FORWARDMAX
		motor.left.target = 300      
	    motor.right.target = 300  
	    		
	end
	if state==STOPPED then
		state=STOPPED
	   	motor.left.target=0
	   	motor.right.target=0
	end
	if  state == NOT_FOLLOW_LINE then
		stp++
	end

	#----------------------------------------------------------------------------#	
#	NEW EDIT FOR TURNING TOWARDS HAZARD LINE
	if counter == 3 then
		call leds.top(0,0,255)
		motor.left.target = 300
		motor.right.target = 300
		timer.period[1] = 4050
	
	end
	if state==WAIT then
		lines=6
		counter++

		state=NOT_FOLLOW_LINE
		motor.left.target=300
		motor.right.target=300
		timer.period[1]=5000
		
	end
	if state==5000 then
		callsub turnRight
	end
	if counter>=16 then
		
		state=FORWARDMAX
		timer.period[1]=10000
	end
	
onevent timer1
	if counter >=16 then
		counter=20
	end
    if counter==3 then
    			if firstCode==1 then
		   		state=TURNING_LEFT
		   	elseif firstCode==2 then
		   		state=TURNING_RIGHT
		   	end 
		   	counter=4
		 motor.left.target=SPEED        	
		motor.right.target = -SPEED
		timer.period[0]=1500
    end
	if state==STOPPED then
		state=STOPPED
	   	motor.left.target=0
	   	motor.right.target=0
	end
	
	if state==NOT_FOLLOW_LINE then
		canFollowNow=1

#		state=TURNING_LEFT
		if openSide==1 then
			call sound.freq(500,10)
	#			state=LEFT
				motor.left.target = -SPEED        	
				motor.right.target = SPEED
				timer.period[0]=4000
				
						
		elseif openSide==2 then
			motor.left.target = SPEED        	
			motor.right.target = -SPEED
			timer.period[0]=4000
			
		end
	end
	
sub turnLeft
	motor.left.target = -SPEED        	
	motor.right.target = SPEED
sub turnRight
	motor.left.target = SPEED        	
	motor.right.target = -SPEED
sub finalForward
	motor.left.target=SPEED
	motor.right.target=SPEED
sub finalForward2
	motor.left.target=SPEED
	motor.right.target=SPEED


	
	
	






</node>


</network>
